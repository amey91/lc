// This is a breadth-first solution. San had suggested a depth first solution using recursion
// TODO: find a iterative solution for breadth-first
class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> answer = new ArrayList<>();
        answer.add(new ArrayList<>());
        this.subsets_(nums, new ArrayList<>(), 0, answer);
        return answer;
    }
    
    private void subsets_(int[] nums, 
                          List<Integer> added, // []
                          int index, // 0
                          List<List<Integer>> answer) {
        if (index == nums.length) {
            return;
        }
        Integer integer = nums[index]; 
        this.subsets_(nums, added, index+1, answer);
        List<Integer> added_ = new ArrayList<>(added); // exclude value  
        added_.add(integer);
        answer.add(added_);
        this.subsets_(nums, added_, index+1, answer); // include value
    }
}


